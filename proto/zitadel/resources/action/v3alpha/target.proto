syntax = "proto3";

package zitadel.resources.action.v3alpha;

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/struct.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "validate/validate.proto";
import "zitadel/protoc_gen_zitadel/v2/options.proto";

option go_package = "github.com/zitadel/zitadel/pkg/grpc/resources/action/v3alpha;action";

message Target {
  string name = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"ip_allow_list\"";
    }
  ];
  // Defines the target type and how the response of the target is treated.
  oneof target_type {
    option (validate.required) = true;
    SetRESTWebhook rest_webhook = 2;
    SetRESTCall rest_call = 3;
    SetRESTAsync rest_async = 4;
  }
  // Timeout defines the duration until ZITADEL cancels the execution.
  google.protobuf.Duration timeout = 5 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"10s\"";
    }
  ];
  string endpoint = 6 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"https://example.com/hooks/ip_check\"";
    }
  ];
}

message PatchTarget {
  optional string name = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"ip_allow_list\"";
    }
  ];
  // Defines the target type and how the response of the target is treated.
  oneof target_type {
    SetRESTWebhook rest_webhook = 2;
    SetRESTCall rest_call = 3;
    SetRESTAsync rest_async = 4;
  }
  // Timeout defines the duration until ZITADEL cancels the execution.
  optional google.protobuf.Duration timeout = 5 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"10s\"";
    }
  ];
  optional string endpoint = 6 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"https://example.com/hooks/ip_check\"";
    }
  ];
}


// Wait for response but response body is ignored, status is checked, call is sent as post.
message SetRESTWebhook {
  // Define if any error stops the whole execution. By default the process continues as normal.
  bool interrupt_on_error = 1;
}

// Wait for response and response body is used, status is checked, call is sent as post.
message SetRESTCall {
  // Define if any error stops the whole execution. By default the process continues as normal.
  bool interrupt_on_error = 1;
}

// Call is executed in parallel to others, ZITADEL does not wait until the call is finished. The state is ignored, call is sent as post.
message SetRESTAsync {}
