syntax = "proto3";

package zitadel.resources.action.v3alpha;

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/struct.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "validate/validate.proto";

import "zitadel/protoc_gen_zitadel/v2/options.proto";
import "zitadel/resources/action/v3alpha/target.proto";
import "zitadel/resources/action/v3alpha/execution.proto";
import "zitadel/resources/object/v3alpha/object.proto";
import "zitadel/settings/object/v3alpha/object.proto";

option go_package = "github.com/zitadel/zitadel/pkg/grpc/resources/action/v3alpha;action";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Action Service";
    version: "3.0-alpha";
    description: "This API is intended to manage custom executions (previously known as actions) in a ZITADEL instance. It will continue breaking as long as it is in alpha state.";
    contact:{
      name: "ZITADEL"
      url: "https://zitadel.com"
      email: "hi@zitadel.com"
    }
    license: {
      name: "Apache 2.0",
      url: "https://github.com/zitadel/zitadel/blob/main/LICENSE";
    };
  };
  schemes: HTTPS;
  schemes: HTTP;

  consumes: "application/json";
  consumes: "application/grpc";

  produces: "application/json";
  produces: "application/grpc";

  consumes: "application/grpc-web+proto";
  produces: "application/grpc-web+proto";

  host: "$ZITADEL_DOMAIN";
  base_path: "/resources/v3alpha/actions";

  external_docs: {
    description: "Detailed information about ZITADEL",
    url: "https://zitadel.com/docs"
  }
  security_definitions: {
    security: {
      key: "OAuth2";
      value: {
        type: TYPE_OAUTH2;
        flow: FLOW_ACCESS_CODE;
        authorization_url: "$CUSTOM-DOMAIN/oauth/v2/authorize";
        token_url: "$CUSTOM-DOMAIN/oauth/v2/token";
        scopes: {
          scope: {
            key: "openid";
            value: "openid";
          }
          scope: {
            key: "urn:zitadel:iam:org:project:id:zitadel:aud";
            value: "urn:zitadel:iam:org:project:id:zitadel:aud";
          }
        }
      }
    }
  }
  security: {
    security_requirement: {
      key: "OAuth2";
      value: {
        scope: "openid";
        scope: "urn:zitadel:iam:org:project:id:zitadel:aud";
      }
    }
  }
  responses: {
    key: "403";
    value: {
      description: "Returned when the user does not have permission to access the resource.";
      schema: {
        json_schema: {
          ref: "#/definitions/rpcStatus";
        }
      }
    }
  }
  responses: {
    key: "404";
    value: {
      description: "Returned when the resource does not exist.";
      schema: {
        json_schema: {
          ref: "#/definitions/rpcStatus";
        }
      }
    }
  }
};

service ZITADELActions {

  // Create a target
  //
  // Create a new target, which can be used in executions.
  rpc CreateTarget (CreateTargetRequest) returns (CreateTargetResponse) {
    option (google.api.http) = {
      post: "/targets"
      body: "target"
    };

    option (zitadel.protoc_gen_zitadel.v2.options) = {
      auth_option: {
        permission: "action.target.write"
      }
      http_response: {
        success_code: 201
      }
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "201";
        value: {
          description: "Target successfully created";
          schema: {
            json_schema: {
              ref: "#/definitions/CreateTargetResponse";
            }
          }
        };
      };
    };
  }

  // Patch a target
  //
  // Patch an existing target.
  rpc PatchTarget (PatchTargetRequest) returns (PatchTargetResponse) {
    option (google.api.http) = {
      patch: "/targets/{id}"
      body: "target"
    };

    option (zitadel.protoc_gen_zitadel.v2.options) = {
      auth_option: {
        permission: "action.target.write"
      }
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "200";
        value: {
          description: "Target successfully updated or left unchanged";
        };
      };
    };
  }

  // Delete a target
  //
  // Delete an existing target. This will remove it from any configured execution as well.
  rpc DeleteTarget (DeleteTargetRequest) returns (DeleteTargetResponse) {
    option (google.api.http) = {
      delete: "/targets/{id}"
    };

    option (zitadel.protoc_gen_zitadel.v2.options) = {
      auth_option: {
        permission: "action.target.delete"
      }
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "200";
        value: {
          description: "Target successfully deleted";
        };
      };
    };
  }

  // Sets an execution to call a target or include the targets of another execution.
  //
  // Setting an empty list of targets will remove all targets from the execution, making it a noop.
  rpc SetExecution (SetExecutionRequest) returns (SetExecutionResponse) {
    option (google.api.http) = {
      put: "/executions"
      body: "*"
    };

    option (zitadel.protoc_gen_zitadel.v2.options) = {
      auth_option: {
        permission: "action.execution.write"
      }
      http_response: {
        success_code: 201
      }
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "200";
        value: {
          description: "Execution successfully updated or left unchanged";
          schema: {
            json_schema: {
              ref: "#/definitions/SetExecutionResponse";
            }
          }
        };
      };
    };
  }

  // List all available functions
  //
  // List all available functions which can be used as condition for executions.
  rpc ListExecutionFunctions (ListExecutionFunctionsRequest) returns (ListExecutionFunctionsResponse) {
    option (google.api.http) = {
      get: "/executions/functions"
    };

    option (zitadel.protoc_gen_zitadel.v2.options) = {
      auth_option: {
        permission: "authenticated"
      }
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "200";
        value: {
          description: "List all functions successfully";
        };
      };
    };
  }
  // List all available methods
  //
  // List all available methods which can be used as condition for executions.
  rpc ListExecutionMethods (ListExecutionMethodsRequest) returns (ListExecutionMethodsResponse) {
    option (google.api.http) = {
      get: "/executions/methods"
    };

    option (zitadel.protoc_gen_zitadel.v2.options) = {
      auth_option: {
        permission: "authenticated"
      }
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "200";
        value: {
          description: "List all methods successfully";
        };
      };
    };
  }
  // List all available service
  //
  // List all available services which can be used as condition for executions.
  rpc ListExecutionServices (ListExecutionServicesRequest) returns (ListExecutionServicesResponse) {
    option (google.api.http) = {
      get: "/executions/services"
    };

    option (zitadel.protoc_gen_zitadel.v2.options) = {
      auth_option: {
        permission: "authenticated"
      }
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "200";
        value: {
          description: "List all services successfully";
        };
      };
    };
  }
}

message CreateTargetRequest {
  Target target = 1;
}

message CreateTargetResponse {
  zitadel.resources.object.v3alpha.Details details = 1;
}

message PatchTargetRequest {
  string id = 1 [
    (validate.rules).string = {min_len: 1, max_len: 200},
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1,
      max_length: 200,
      example: "\"69629026806489455\"";
    }
  ];
  PatchTarget target = 2;
}

message PatchTargetResponse {
  zitadel.resources.object.v3alpha.Details details = 1;
}

message DeleteTargetRequest {
  string id = 1 [
    (validate.rules).string = {min_len: 1, max_len: 200},
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1,
      max_length: 200,
      example: "\"69629026806489455\"";
    }
  ];
}

message DeleteTargetResponse {
  zitadel.resources.object.v3alpha.Details details = 1;
}

message SetExecutionRequest {
  Condition condition = 1;
  Execution execution = 2;
}

message SetExecutionResponse {
  zitadel.settings.object.v3alpha.Details details = 1;
}

message ListExecutionFunctionsRequest{}
message ListExecutionFunctionsResponse{
  // All available methods
  repeated string functions = 1;
}
message ListExecutionMethodsRequest{}
message ListExecutionMethodsResponse{
  // All available methods
  repeated string methods = 1;
}

message ListExecutionServicesRequest{}
message ListExecutionServicesResponse{
  // All available methods
  repeated string services = 1;
}
